<?xml version="1.0" encoding="UTF-8"?>
<project
  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"
  xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
  <modelVersion>4.0.0</modelVersion>
  <groupId>com.semperti.hipotecario.poc.fuse.cobis</groupId>
  <artifactId>poc-fuse-3scale-cobis</artifactId>
  <version>1.0.1</version>
  <packaging>bundle</packaging>
  <name>Integracion cobis - rest</name>
  <description>REST example using CXF in Karaf container</description>

  <properties>
    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    <version.maven-bundle-plugin>2.3.7</version.maven-bundle-plugin>

    <!-- versions for use in mvn plugins as we cannot inherit them from a BOM -->
    <fuse.version>6.2.1.redhat-084</fuse.version>
    <fabric8.version>2.2.0.redhat-079</fabric8.version>
    <docker.maven.plugin.version>0.13.6</docker.maven.plugin.version>
    <karaf.plugin.version>4.0.2.redhat-621079</karaf.plugin.version>
    <semperti-karaf-blueprint.version>1.0.1</semperti-karaf-blueprint.version>

    <docker.from>jboss-fuse-6/fis-karaf-openshift:1.0</docker.from>
    <fabric8.dockerUser>semperti-hipotecario/</fabric8.dockerUser>
    <docker.image>${fabric8.dockerUser}${project.artifactId}:${project.version}</docker.image>
    <docker.assemblyDescriptor>${basedir}/src/main/fabric8/assembly.xml</docker.assemblyDescriptor>
    <docker.port.container.jolokia>8778</docker.port.container.jolokia>
    <docker.port.container.http>8181</docker.port.container.http>

    <fabric8.service.name>semperti-hipotecario-poc-fuse-3scale</fabric8.service.name>
    <fabric8.service.port>9412</fabric8.service.port>
    <fabric8.service.containerPort>8181</fabric8.service.containerPort>

    <fabric8.label.component>${project.artifactId}</fabric8.label.component>
    <fabric8.label.container>karaf</fabric8.label.container>
    <fabric8.label.group>quickstarts</fabric8.label.group>
    <fabric8.iconRef>camel</fabric8.iconRef>
  </properties>

  <dependencyManagement>
    <dependencies>
      <dependency>
        <groupId>io.fabric8</groupId>
        <artifactId>fabric8-project-bom-with-platform-deps</artifactId>
        <version>${fabric8.version}</version>
        <type>pom</type>
        <scope>import</scope>
      </dependency>
      <dependency>
        <groupId>org.jboss.fuse.bom</groupId>
        <artifactId>jboss-fuse-parent</artifactId>
        <version>${fuse.version}</version>
        <type>pom</type>
        <scope>import</scope>
      </dependency>
    </dependencies>
  </dependencyManagement>

  <dependencies>
    <dependency>
      <groupId>com.semperti.hipotecario.poc.fuse.model</groupId>
      <artifactId>poc-fuse-3scale</artifactId>
      <version>1.0.5</version>
    </dependency>

    <dependency>
      <groupId>org.apache.camel</groupId>
      <artifactId>camel-core</artifactId>
    </dependency>
    <dependency>
      <groupId>org.apache.camel</groupId>
      <artifactId>camel-blueprint</artifactId>
    </dependency>
    <dependency>
      <groupId>org.apache.camel</groupId>
      <artifactId>camel-jackson</artifactId>
    </dependency>

    <!-- Database -->
       <dependency>
      <groupId>commons-pool</groupId>
      <artifactId>commons-pool</artifactId>
      <version>1.6.0.redhat-7</version>
    </dependency>
    <dependency>
      <groupId>org.apache.servicemix.bundles</groupId>
      <artifactId>org.apache.servicemix.bundles.commons-dbcp</artifactId>
      <version>1.4_3</version>
    </dependency>

    <!-- CXF -->
    <dependency>
      <groupId>org.apache.camel</groupId>
      <artifactId>camel-cxf</artifactId>
    </dependency>
    <dependency>
      <groupId>org.apache.cxf</groupId>
      <artifactId>cxf-core</artifactId>
    </dependency>
    <!--dependency>
      <groupId>org.apache.cxf</groupId>
      <artifactId>cxf-rt-transports-http-jetty</artifactId>
    </dependency>
    <dependency>
      <groupId>org.apache.cxf</groupId>
      <artifactId>cxf-rt-frontend-jaxrs</artifactId>
    </dependency>
    <dependency>
      <groupId>org.apache.cxf</groupId>
      <artifactId>cxf-rt-rs-service-description</artifactId>
    </dependency-->

    <!-- Env property evaluator -->
    <dependency>
      <groupId>com.semperti.karaf.blueprint</groupId>
      <artifactId>semperti-karaf-blueprint</artifactId>
      <version>${semperti-karaf-blueprint.version}</version>
    </dependency>

    <!-- Karaf microcontainer dependencies -->
    <dependency>
      <!-- scope is compile so all features (there is only one) are installed into startup.properties,
      and the feature repo itself is not added in etc/org.apache.karaf.features.cfg file -->
      <groupId>org.jboss.fuse</groupId>
      <artifactId>fuse-karaf-framework</artifactId>
      <version>${fuse.version}</version>
      <type>kar</type>
      <exclusions>
        <exclusion>
          <groupId>*</groupId>
          <artifactId>*</artifactId>
        </exclusion>
      </exclusions>
    </dependency>

    <!-- XXX: El de RedHat aca tiene apache-camel features y spring features -->
  </dependencies>

  <build>
    <finalName>${project.artifactId}</finalName>

    <resources>
      <resource>
        <directory>src/main/resources</directory>
        <filtering>true</filtering>
      </resource>
    </resources>

    <plugins>
      <!-- Compiler plugin enforces Java 1.7 compatibility and activates annotation processors -->
      <plugin>
        <artifactId>maven-compiler-plugin</artifactId>
        <version>3.3</version>
        <configuration>
          <source>1.7</source>
          <target>1.7</target>
        </configuration>
      </plugin>

      <plugin>
        <groupId>org.apache.felix</groupId>
        <artifactId>maven-bundle-plugin</artifactId>
        <version>${version.maven-bundle-plugin}</version>
        <extensions>true</extensions>
        <configuration>
          <instructions>
            <DynamicImport-Package>*</DynamicImport-Package>
          </instructions>
        </configuration>
      </plugin>

      <plugin>
        <groupId>io.fabric8</groupId>
        <artifactId>fabric8-maven-plugin</artifactId>
        <version>${fabric8.version}</version>
        <executions>
          <execution>
            <id>json</id>
            <phase>generate-resources</phase>
            <goals>
              <goal>json</goal>
            </goals>
          </execution>
          <execution>
            <id>attach</id>
            <phase>package</phase>
            <goals>
              <goal>attach</goal>
            </goals>
          </execution>
        </executions>
      </plugin>


      <!-- plugin goals have to be executed in order -->
      <!-- 1. install the bundle -->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-install-plugin</artifactId>
        <version>2.5.2</version>
        <executions>
          <execution>
            <id>install-artifacts</id>
            <goals>
              <goal>install</goal>
            </goals>
          </execution>
        </executions>
      </plugin>

      <!-- 2. create karaf assembly -->
      <!-- karaf-maven-plugin creates custom microservice distribution -->
      <plugin>
        <groupId>org.apache.karaf.tooling</groupId>
        <artifactId>karaf-maven-plugin</artifactId>
        <version>${karaf.plugin.version}</version>
        <extensions>true</extensions>
        <executions>
          <execution>
            <id>karaf-assembly</id>
            <phase>install</phase>
            <goals>
              <goal>assembly</goal>
            </goals>
          </execution>
          <execution>
            <id>karaf-archive</id>
            <phase>install</phase>
            <goals>
              <goal>archive</goal>
            </goals>
          </execution>
        </executions>
        <configuration>
          <!-- we are using karaf 2.4.x -->
          <karafVersion>v24</karafVersion>
          <useReferenceUrls>true</useReferenceUrls>
          <!-- do not include build output directory -->
          <includeBuildOutputDirectory>false</includeBuildOutputDirectory>
          <!-- XXX: RH no tiene este -->
          <!--startupRepositories>
            <repo>mvn:${project.groupId}/${project.artifactId}/${project.version}/xml/features</repo>
          </startupRepositories-->
          <!-- no startupFeatures -->
          <startupFeatures>
            <feature>karaf-framework</feature>
            <feature>jaas</feature>
            <feature>shell</feature>
            <feature>aries-blueprint</feature>
            <!--feature>cxf-http-jetty</feature>
            <feature>cxf-specs</feature-->
            <features>camel-cxf</features>
            <!--features>camel-jackson</features-->
            <features>camel-swagger</features>
          </startupFeatures>
          <startupBundles>
            <bundle>mvn:com.semperti.karaf.blueprint/semperti-karaf-blueprint/${semperti-karaf-blueprint.version}</bundle>
            <bundle>mvn:${project.groupId}/${project.artifactId}/${project.version}</bundle>
          </startupBundles>
        </configuration>
      </plugin>

      <!-- 3. create docker image -->
      <plugin>
        <groupId>org.jolokia</groupId>
        <artifactId>docker-maven-plugin</artifactId>
        <version>${docker.maven.plugin.version}</version>
        <configuration>
          <images>
            <image>
              <name>${docker.image}</name>
              <build>
                <from>${docker.from}</from>
                <assembly>
                  <basedir>/deployments</basedir>
                  <user>jboss:jboss:jboss</user>
                  <inline
                    xmlns="http://maven.apache.org/plugins/maven-assembly-plugin/assembly/1.1.2"
                    xsi:schemaLocation="http://maven.apache.org/plugins/maven-assembly-plugin/assembly/1.1.2 http://maven.apache.org/xsd/assembly-1.1.2.xsd">
                    <id>${project.artifactId}</id>
                    <files>
                      <!-- copy karaf archive -->
                      <file>
                        <source>${project.build.directory}/${project.artifactId}-${project.version}.tar.gz</source>
                        <outputDirectory>/</outputDirectory>
                      </file>
                    </files>
                  </inline>
                </assembly>
                <cmd>
                  <shell>/deployments/deploy-and-run.sh</shell>
                </cmd>
                <ports>
                  <port>8181</port>
                </ports>
              </build>
            </image>
          </images>
        </configuration>
      </plugin>
    </plugins>
  </build>

  <!--
  Default sample commands:

  mvn -Pf8-build         ... build Docker images and create OpenShift deployment configs
  mvn -Pf8-deploy        ... f8-build + push to Docker registry + applying deployment config to OpenShift
  mvn -Pf8-local-deploy ... deployment for a single node setup without pushing to a registry

  For individual goal usage please consult the fabric8 documentation
  -->
  <profiles>
    <profile>
      <id>f8-build</id>
      <build>
        <defaultGoal>clean install docker:build fabric8:json</defaultGoal>
      </build>
    </profile>
    <profile>
      <id>f8-deploy</id>
      <build>
        <defaultGoal>clean install docker:build docker:push fabric8:json fabric8:apply</defaultGoal>
      </build>
      <properties>
        <fabric8.recreate>true</fabric8.recreate>
        <fabric8.imagePullPolicySnapshot>Always</fabric8.imagePullPolicySnapshot>
      </properties>
    </profile>
    <profile>
      <id>f8-local-deploy</id>
      <build>
        <defaultGoal>clean install docker:build fabric8:json fabric8:apply</defaultGoal>
      </build>
      <properties>
        <fabric8.recreate>true</fabric8.recreate>
      </properties>
    </profile>
  </profiles>

</project>
